name: CI-CD Deploy

on:
  push:
    branches:
      - develop

env:
  IMAGE_NAME: ${{ secrets.SPRING_IMAGE }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      - name: Build Spring Boot JAR
        run: ./gradlew bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.SPRING_IMAGE }}:${{ steps.vars.outputs.sha }} .
          docker push ${{ secrets.SPRING_IMAGE }}:${{ steps.vars.outputs.sha }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 시크릿 직접 할당
            IMAGE_NAME="${{ secrets.SPRING_IMAGE }}"
            MYSQL_URL="${{ secrets.MYSQL_URL }}"
            MYSQL_USERNAME="${{ secrets.MYSQL_USERNAME }}"
            MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}"
            S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
            S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
            S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}"

            echo "IMAGE_NAME is '$IMAGE_NAME'"

            IMAGE_TAG="${IMAGE_NAME}:${{ steps.vars.outputs.sha }}"
            IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)

            echo "Deploying image: $IMAGE_TAG"

            # 실행 중인 컨테이너가 있으면 중지
            if sudo docker ps -q -f name=zerowaste-server | grep -q .; then
              sudo docker stop zerowaste-server
            fi

            # 존재하는 컨테이너 있으면 삭제
            if sudo docker ps -a -q -f name=zerowaste-server | grep -q .; then
              sudo docker rm zerowaste-server
            fi

            sudo docker pull "$IMAGE_TAG"

            sudo docker run -d \
              --name zerowaste-server \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=dev \
              -e MYSQL_URL="${MYSQL_URL}" \
              -e MYSQL_USERNAME="${MYSQL_USERNAME}" \
              -e MYSQL_PASSWORD="${MYSQL_PASSWORD}" \
              -e S3_BUCKET_NAME="${S3_BUCKET_NAME}" \
              -e S3_ACCESS_KEY="${S3_ACCESS_KEY}" \
              -e S3_SECRET_KEY="${S3_SECRET_KEY}" \
              "$IMAGE_TAG"
